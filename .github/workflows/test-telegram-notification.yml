name: Test Telegram Notification

on:
  workflow_dispatch:
    inputs:
      custom_message:
        description: 'Custom message (optional)'
        required: false
        type: string
      custom_chat_id:
        description: 'Custom Telegram chat ID for testing'
        required: false
        type: string

jobs:
  get-latest-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      changelog: ${{ steps.get_changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get latest release
        id: get_latest_release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            
            if (releases.length === 0) {
              core.setFailed('No releases found');
              return;
            }
            
            const latestRelease = releases[0];
            core.setOutput('tag_name', latestRelease.tag_name);
            core.setOutput('body', latestRelease.body);
            console.log(`Latest release: ${latestRelease.tag_name}`);
      
      - name: Set version
        id: get_version
        run: |
          TAG="${{ steps.get_latest_release.outputs.tag_name }}"
          VERSION="${TAG#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Latest version: $VERSION"
          
      - name: Set changelog
        id: get_changelog
        run: |
          CHANGELOG=$(cat << 'EOF'
          ${{ steps.get_latest_release.outputs.body }}
          EOF
          )
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  process-content:
    runs-on: ubuntu-latest
    needs: get-latest-release
    outputs:
      chinese_message: ${{ steps.generate_chinese.outputs.message }}
      english_message: ${{ steps.generate_english.outputs.message }}
    steps:
      - name: Generate Chinese message using OpenRouter AI
        id: generate_chinese
        uses: actions/github-script@v7
        with:
          script: |
            const axios = require('axios');
            
            try {
              const response = await axios.post(
                'https://openrouter.ai/api/v1/chat/completions',
                {
                  model: 'qwen/qwen-2.5-72b-instruct',
                  messages: [
                    {
                      role: 'user',
                      content: `请将以下发布通知翻译成简体中文，并格式化为Telegram纯文本消息（不要使用Markdown）：
                      
                      版本: ${{ needs.get-latest-release.outputs.version }}
                      
                      更新日志:
                      ${{ needs.get-latest-release.outputs.changelog }}
                      
                      下载链接: https://github.com/${{ github.repository }}/releases/tag/${{ needs.get-latest-release.outputs.version }}
                      
                      请保持简洁，使用纯文本格式，不要使用Markdown语法，使用emoji表情符号增加可读性。`
                    }
                  ]
                },
                {
                  headers: {
                    'Authorization': 'Bearer ${{ secrets.OPENROUTER_API_KEY }}',
                    'Content-Type': 'application/json'
                  }
                }
              );
              
              const message = response.data.choices[0].message.content.trim();
              core.setOutput('message', message);
              console.log('Generated Chinese message');
            } catch (error) {
              console.error('Error calling OpenRouter API:', error.message);
              // 如果API调用失败，使用默认消息
              const defaultMessage = `🚀 Blinko ${{ needs.get-latest-release.outputs.version }} 已发布！\n\n📝 更新日志：\n${{ needs.get-latest-release.outputs.changelog }}\n\n📥 下载链接：\nhttps://github.com/${{ github.repository }}/releases/tag/${{ needs.get-latest-release.outputs.version }}`;
              core.setOutput('message', defaultMessage);
            }
      
      - name: Generate English message using OpenRouter AI
        id: generate_english
        uses: actions/github-script@v7
        with:
          script: |
            const axios = require('axios');
            
            try {
              const response = await axios.post(
                'https://openrouter.ai/api/v1/chat/completions',
                {
                  model: 'qwen/qwen-2.5-72b-instruct',
                  messages: [
                    {
                      role: 'user',
                      content: `Format the following release notification as a plain text Telegram message (no Markdown):
                      
                      Version: ${{ needs.get-latest-release.outputs.version }}
                      
                      Changelog:
                      ${{ needs.get-latest-release.outputs.changelog }}
                      
                      Download: https://github.com/${{ github.repository }}/releases/tag/${{ needs.get-latest-release.outputs.version }}
                      
                      Keep it concise, use plain text format, no Markdown syntax, and use emoji for better readability.`
                    }
                  ]
                },
                {
                  headers: {
                    'Authorization': 'Bearer ${{ secrets.OPENROUTER_API_KEY }}',
                    'Content-Type': 'application/json'
                  }
                }
              );
              
              const message = response.data.choices[0].message.content.trim();
              core.setOutput('message', message);
              console.log('Generated English message');
            } catch (error) {
              console.error('Error calling OpenRouter API:', error.message);
              // 如果API调用失败，使用默认消息
              const defaultMessage = `🚀 Blinko ${{ needs.get-latest-release.outputs.version }} has been released!\n\n📝 Changelog:\n${{ needs.get-latest-release.outputs.changelog }}\n\n📥 Download:\nhttps://github.com/${{ github.repository }}/releases/tag/${{ needs.get-latest-release.outputs.version }}`;
              core.setOutput('message', defaultMessage);
            }

  test-telegram:
    runs-on: ubuntu-latest
    needs: [get-latest-release, process-content]
    steps:
      - name: Send test to custom chat ID
        if: github.event.inputs.custom_chat_id != ''
        uses: appleboy/telegram-action@v0.1.1
        continue-on-error: true
        with:
          to: ${{ github.event.inputs.custom_chat_id }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: html
          debug: true
          message: |
            ${{ needs.process-content.outputs.chinese_message }}

      - name: Send test notification to Telegram group 1 (Chinese)
        uses: appleboy/telegram-action@v0.1.1
        continue-on-error: true
        with:
          to: ${{ secrets.TELEGRAM_GROUP_ID_1 }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: html
          debug: true
          message: |
            ${{ needs.process-content.outputs.chinese_message }}

      - name: Send test notification to Telegram group 2 (English)
        uses: appleboy/telegram-action@v0.1.1
        continue-on-error: true
        with:
          to: ${{ secrets.TELEGRAM_GROUP_ID_2 }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: html
          debug: true
          message: |
            ${{ needs.process-content.outputs.english_message }} 